plugins {
    id 'com.android.library'
    id 'kotlin-android'
}

android {
    compileSdk version_sdk

    defaultConfig {
        minSdk 25
        targetSdk version_sdk

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17"
                arguments "-DBUILD_SHARED_LIBS=ON", "-DENABLE_CCACHE=ON"
                cppFlags "-I${buildFile.parent}/src/main/cpp/include",
                         "-I${buildFile.parent}/src/main/cpp/3rdparty/utfcpp/source"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "$version_cmake"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    namespace 'apps.chocolatecakecodes.bluebeats.lib_taglib'
}

dependencies {

}

tasks.register('cleanIncludeDir', Delete) {
    delete(file(project.projectDir.absolutePath + "/src/main/cpp/include/"))
}
tasks.named("clean").configure {
    dependsOn("cleanIncludeDir")
}

tasks.register('generateIncludeDir', Copy) {
    from file(project.projectDir.absolutePath + "/src/main/cpp/")
    into file(project.projectDir.absolutePath + "/src/main/cpp/include/")
    include("**/*.h")
    include("**/*.tcc")
    exclude("include/**")

    duplicatesStrategy = DuplicatesStrategy.WARN

    // flatten
    eachFile {
        path = name
    }
    includeEmptyDirs = false
}

tasks.register('generateConfigHeader', Copy) {
    dependsOn["generateIncludeDir"]

    from file(project.projectDir.absolutePath + "/src/main/cpp/taglib/taglib_config.h.cmake")
    into file(project.projectDir.absolutePath + "/src/main/cpp/taglib/")
    rename { "taglib_config.h" }
}

tasks.register('generateInitialFiles') {
    group = 'build'
    dependsOn["generateConfigHeader"]
}
