import com.jaredsburrows.license.LicenseReportTask

import java.nio.file.Files

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.google.devtools.ksp'
    id 'org.jetbrains.kotlin.plugin.serialization' version "$version_kotlin"
    id 'idea'
    id 'com.jaredsburrows.license' version '0.9.3'
}

idea{
    module{
        downloadJavadoc = true
        downloadSources = true
    }
}

def appVersionName = "Alpha-1.4.0"

repositories {
    google()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

android {
    signingConfigs {
        release {
            Properties properties = new Properties()
            properties.load(project.rootProject.file('local.properties').newDataInputStream())

            storeFile file(properties.getProperty("keystore.file"))
            storePassword properties.getProperty("keystore.password")
            keyAlias 'main'
            keyPassword properties.getProperty("keystore.password")
        }
    }

    compileSdk version_sdk

    defaultConfig {
        applicationId "apps.chocolatecakecodes.bluebeats"
        minSdkVersion 25
        targetSdkVersion version_sdk
        versionCode 1
        versionName appVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        javaCompileOptions {
            ksp {
                arg("room.schemaLocation", "$projectDir/misc/db_schemas/".toString())
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
        freeCompilerArgs += '-Xjvm-default=all'
    }

    namespace 'apps.chocolatecakecodes.bluebeats'
}

dependencies {
    def room_version = '2.6.0'
    def fastadapter_version = '5.7.0'
    def media3_version = '1.1.1'
    def lifecycle_version = '2.6.2'
    def acra_version = '5.11.3'

    implementation project(':taglib')

    implementation fileTree(dir: "${project.buildFile.parent}/libs/", include: '**/*.aar')

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$version_kotlin"
    implementation "androidx.core:core-ktx:$version_android_ktx"

    implementation "androidx.appcompat:appcompat:$version_appcompat"
    implementation 'com.google.android.material:material:1.10.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation 'androidx.recyclerview:recyclerview-selection:1.1.0'
    implementation 'androidx.webkit:webkit:1.8.0'

    implementation "androidx.room:room-runtime:$room_version"
    ksp "androidx.room:room-compiler:$room_version"
    implementation 'com.google.guava:guava:32.0.1-android'
    implementation "androidx.media3:media3-session:$media3_version"
    implementation "androidx.media3:media3-common:$media3_version"

    implementation "com.mikepenz:fastadapter:${fastadapter_version}"
    implementation "com.mikepenz:fastadapter-extensions-expandable:${fastadapter_version}"
    implementation "com.mikepenz:fastadapter-extensions-binding:${fastadapter_version}"
    implementation "com.mikepenz:fastadapter-extensions-diff:${fastadapter_version}"
    implementation "com.mikepenz:fastadapter-extensions-drag:${fastadapter_version}"
    implementation "com.mikepenz:fastadapter-extensions-scroll:${fastadapter_version}"
    implementation "com.mikepenz:fastadapter-extensions-ui:${fastadapter_version}"
    implementation "com.mikepenz:fastadapter-extensions-utils:${fastadapter_version}"

    implementation 'com.github.cachapa:ExpandableLayout:2.9.2'

    implementation "ch.acra:acra-mail:$acra_version"
    implementation "ch.acra:acra-dialog:$acra_version"

    implementation 'org.videolan.android:libvlc-all:4.0.0-eap13'

    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0'

    testImplementation "junit:junit:$version_junit"
    androidTestImplementation "androidx.test.ext:junit:$version_android_junit"
    androidTestImplementation "androidx.test.espresso:espresso-core:$version_espresso"
    testImplementation "androidx.room:room-testing:$room_version"
}

tasks.withType(LicenseReportTask).configureEach {
    notCompatibleWithConfigurationCache("")
}

tasks.register('publishApkDebug') {
    group = "publish"
    dependsOn("build")

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    def url = "${properties.getProperty("gitlab.host")}/api/v4/projects/${properties.getProperty("gitlab.projectId")}/packages/generic/${project.name}/$appVersionName/BlueBeats.apk"
    def file = java.nio.file.Path.of("${project.buildDir}/outputs/apk/debug/app-debug.apk")
    def authCredentials = "${properties.getProperty("gitlab.publish.username")}:${properties.getProperty("gitlab.publish.password")}"

    doLast {
        def http = (HttpURLConnection) new URL(url).openConnection()
        http.doOutput = true
        http.doInput = true
        http.instanceFollowRedirects = true
        http.requestMethod = "PUT"
        http.setRequestProperty("Authorization", "Basic " + Base64.getEncoder().encodeToString(authCredentials.getBytes()))

        def httpOut = http.outputStream
        def fileIn = Files.newInputStream(file)
        fileIn.transferTo(httpOut)
        httpOut.flush()
        httpOut.close()
        fileIn.close()

        def httpRespCode = http.getResponseCode()
        if (httpRespCode < 200 || httpRespCode >= 300) {
            def httpErrIn = new BufferedReader(new InputStreamReader(http.errorStream))
            def respLines = httpErrIn.readLines()
            httpErrIn.close()

            def msg = "Upload of debug apk failed: statusCode = $httpRespCode; statusMessage = ${http.responseMessage}\n${respLines.join("\n")}"
            throw new IOException(msg)
        } else {
            logger.info("Uploaded debug apk")
        }
    }
}
